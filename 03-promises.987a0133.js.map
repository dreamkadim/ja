{"mappings":"gfAAAA,EAAA,SAEA,IAAMC,EAAaC,SAASC,SAASC,cAAc,qBAAqBC,OAElEC,GADQJ,SAASC,SAASC,cAAc,oBAAoBC,OAC9CH,SAClBC,SAASC,cAAc,sBAAsBC,QAG7BF,SAASC,cAAc,uBAE/BG,iBAAiB,SAAS,WAClCC,YAAW,WACT,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAaG,IAC/BC,QAAQC,IAAIF,E,GAGbR,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst firstDelay = parseInt(document.querySelector('input[name=delay]').value);\nconst delay = parseInt(document.querySelector('input[name=step]').value);\nconst amountInput = parseInt(\n  document.querySelector('input[name=amount]').value\n);\n\nconst submitBtn = document.querySelector('button[type=submit]');\n\nsubmitBtn.addEventListener('click', () => {\n  setTimeout(() => {\n    for (let i = 0; i < amountInput; i++) {\n      console.log(i);\n      // return createPromise;\n    }\n  }, firstDelay);\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        //Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n//starting code\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notiflix.Notify.warning(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["parcelRequire","$ce04d3a99e08e73b$var$firstDelay","parseInt","document","querySelector","value","$ce04d3a99e08e73b$var$amountInput","addEventListener","setTimeout","i","console","log"],"version":3,"file":"03-promises.987a0133.js.map"}